<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [waffle, waffle_pi]"/>
  <arg name="use_gazebo"             default="true" />
  <arg name="sample_duration"        default="0.030" />
  <arg name="open_rviz"              default="true"  />
<!--  <arg name="use_ar_marker"          default="false" />-->
  <arg name="debug"                  default="false" />

  <arg name="robot_name"       default="om_with_tb3"/>
  <arg name="planning_group"   default="arm"/>

  <group if="$(arg use_gazebo)">
    <node name="gazebo_bridge" pkg="open_manipulator_with_tb3" type="open_manipulator_with_tb3_gazebo_bridge" output="screen" ns="$(arg robot_name)"/>
  </group>

  <!-- We do not have a robot connected, so publish fake joint states -->
<!--  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/>
    <rosparam param="source_list">["om_with_tb3/joint_states"]</rosparam>
  </node>-->

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <group if="$(eval model == 'pi')">
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find open_manipulator_with_tb3_waffle_pi_moveit)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find open_manipulator_with_tb3_waffle_pi_moveit)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="false"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="false"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="sample_duration" value="$(arg sample_duration)"/>
    </include>
  </group>

  <group unless="$(eval model == 'pi')">
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find open_manipulator_with_tb3_waffle_moveit)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find open_manipulator_with_tb3_waffle_moveit)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="false"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="false"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="sample_duration" value="$(arg sample_duration)"/>
    </include>
  </group>

  <group if="$(arg open_rviz)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find open_manipulator_with_tb3_tools)/rviz/open_manipulator_with_tb3_manipulation.rviz"/>
  </group>

  <node name="$(arg planning_group)" pkg="open_manipulator_with_tb3" type="open_manipulator_with_tb3_moveit_bridge" output="screen">
    <param name="planning_group"      value="$(arg planning_group)"/>
    <param name="use_gazebo"      value="$(arg use_gazebo)"/>
    <remap from="$(arg planning_group)/joint_trajectory" to="$(arg robot_name)/joint_trajectory"/>
  </node>

<!--  <group if="$(arg use_ar_marker)">
    <include file="$(find open_manipulator_ar_markers)/launch/ar_pose.launch">
      <arg name="use_gazebo"     value="$(arg use_gazebo)"/>
    </include>
  </group>-->
</launch>
